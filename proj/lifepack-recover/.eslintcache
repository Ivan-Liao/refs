[{"C:\\all\\proj\\lifepack-recover\\src\\index.js":"1","C:\\all\\proj\\lifepack-recover\\src\\reportWebVitals.js":"2","C:\\all\\proj\\lifepack-recover\\src\\App.js":"3","C:\\all\\proj\\lifepack-recover\\src\\components\\RippleAnime.js":"4","C:\\all\\proj\\lifepack-recover\\src\\components\\Plan.js":"5","C:\\all\\proj\\lifepack-recover\\src\\components\\Rate.js":"6"},{"size":220,"mtime":1611425374024,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":2910,"mtime":1612669297970,"results":"10","hashOfConfig":"8"},{"size":3176,"mtime":1612815973264,"results":"11","hashOfConfig":"8"},{"size":1516,"mtime":1612811336349,"results":"12","hashOfConfig":"8"},{"size":1767,"mtime":1612812544659,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"arfb3m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"C:\\all\\proj\\lifepack-recover\\src\\index.js",[],["31","32"],"C:\\all\\proj\\lifepack-recover\\src\\reportWebVitals.js",[],"C:\\all\\proj\\lifepack-recover\\src\\App.js",["33","34","35","36","37"],"import {React, useState, useRef} from 'react';\nimport './App.css';\nimport {Row, Col, Nav, Tab, Tabs, TabContainer, TabContent, TabPane} from 'react-bootstrap';\nimport RippleAnime from './components/RippleAnime';\nimport Rate from './components/Rate.js';\nimport Plan from './components/Plan';\n\nconst defaultfeelingsList = [\n  \"stressed\",\n  \"lonely\",\n  \"angry\",\n  \"hopeless\",\n  \"scared\",\n  \"empty\",\n  \"overwhelmed\",\n  \"disappointed\",\n  \"numb\",\n  \"ashamed\",\n  \"uncomfortable\",\n  \"lack of control\",\n  \"desperate\",\n  \"disgusted\",\n  \"heartbroken\",\n  \"mournful\",\n  \"physical pain\",\n  \"annoyed\",\n  \"bored\",\n  \"lost\",\n];\n\nfunction App() {\n  // list of text for feelings\n  const [feelingsList, setfeelingsList] = useState(defaultfeelingsList);\n  const [selectedFeelingsList, setSelectedFeelingsList] = useState([]);\n\n\n  return (\n    <Tab.Container defaultActiveKey=\"first\" className=\"main-tabs-container\">\n      <Row>\n        <Col sm={12}>\n          <Nav variant=\"pills\" className=\"flex-row\">\n            <Nav.Item className=\"tab-selector\">\n              <Nav.Link eventKey=\"first\">Feel</Nav.Link>\n            </Nav.Item>\n            <Nav.Item className=\"tab-selector\">\n              <Nav.Link eventKey=\"second\">Rate</Nav.Link>\n            </Nav.Item>\n            <Nav.Item className=\"tab-selector\">\n              <Nav.Link eventKey=\"third\">Breathe</Nav.Link>\n            </Nav.Item>\n            <Nav.Item className=\"tab-selector\">\n              <Nav.Link eventKey=\"fourth\">Plan</Nav.Link>\n            </Nav.Item>\n            <Nav.Item className=\"tab-selector\">\n              <Nav.Link eventKey=\"fifth\">Action</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Col>\n        <Col sm={12}>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"first\" className=\"main-tab\">\n              <RippleAnime\n                feelingsList={feelingsList}\n                setfeelingsList={setfeelingsList}\n                selectedFeelingsList={selectedFeelingsList}\n                setSelectedFeelingsList={setSelectedFeelingsList}\n              />\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"second\" className=\"main-tab\">\n              <Rate />\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"third\" className=\"main-tab\">\n              <p className=\"breathe-text\">Accept Your Feelings...</p>\n              <p className=\"breathe-text\">Breathe in for 3 seconds...</p>\n              <p className=\"breathe-text\">Hold for 3 seconds...</p>\n              <p className=\"breathe-text\">Breathe out for 3 seconds...</p>\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"fourth\" className=\"main-tab\">\n              <Plan />\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"fifth\" className=\"main-tab\">\n              <p className=\"breathe-text\">Put Your Plan into Action</p>\n            </Tab.Pane>\n          </Tab.Content>\n        </Col>\n      </Row>\n    </Tab.Container>\n  );\n}\n\nexport default App;\n","C:\\all\\proj\\lifepack-recover\\src\\components\\RippleAnime.js",["38"],"import React from 'react';\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport anime from \"animejs\";\r\nimport v4 from \"../../node_modules/uuid/dist/v4.js\";\r\n\r\n\r\nfunction RippleAnime(props) {\r\n\r\n  // animation\r\n  const animationRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      let randFeeling = Math.floor(Math.random() * Math.floor(19));\r\n      animationRef.current = anime({\r\n        targets: \".feeling-btn\",\r\n        scale: [\r\n          { value: 1.5, easing: \"easeOutSine\", duration: 700 },\r\n          { value: 1, easing: \"easeInOutQuad\", duration: 1500 }, // back to original size\r\n        ],\r\n        delay: anime.stagger(600, { grid: [4, 5], from: randFeeling }), // spread speed\r\n        loop: false,\r\n      });\r\n    }, 5000);\r\n  }, []);\r\n\r\n  // button handler to append to list of selected feelings\r\n  const feelingsButtonHandler = (e) => {\r\n    if (!props.selectedFeelingsList.includes(e.target.textContent)) {\r\n      props.setSelectedFeelingsList([\r\n        ...props.selectedFeelingsList, \r\n        {id: v4(),\r\n          feeling: e.target.textContent}\r\n      ]);\r\n    }\r\n    else {\r\n      props.setSelectedFeelingsList([\r\n        ...props.selectedFeelingsList.filter(function(item) {return item !== e.target.textContent})\r\n      ])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              {props.feelingsList.slice(0, 4).map((el) => (\r\n                <Button className=\"feeling-btn\" onClick={feelingsButtonHandler}>\r\n                  <p className=\"ripple-text\">{el}</p>\r\n                </Button>\r\n              ))}\r\n            </Col>\r\n            <Col>\r\n              {props.feelingsList.slice(4, 8).map((el) => (\r\n                <Button className=\"feeling-btn\" onClick={feelingsButtonHandler}>\r\n                  <p className=\"ripple-text\">{el}</p>\r\n                </Button>\r\n              ))}\r\n            </Col>\r\n            <Col>\r\n              {props.feelingsList.slice(8, 12).map((el) => (\r\n                <Button className=\"feeling-btn\" onClick={feelingsButtonHandler}>\r\n                  <p className=\"ripple-text\">{el}</p>\r\n                </Button>\r\n              ))}\r\n            </Col>\r\n            <Col>\r\n              {props.feelingsList.slice(12, 16).map((el) => (\r\n                <Button className=\"feeling-btn\" onClick={feelingsButtonHandler}>\r\n                  <p className=\"ripple-text\">{el}</p>\r\n                </Button>\r\n              ))}\r\n            </Col>\r\n            <Col>\r\n              {props.feelingsList.slice(16, 20).map((el) => (\r\n                <Button className=\"feeling-btn\" onClick={feelingsButtonHandler}>\r\n                  <p className=\"ripple-text\">{el}</p>\r\n                </Button>\r\n              ))}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <p className=\"selected-feelings handwriting-area\">\r\n              I'm feeling {props.selectedFeelingsList.map((e) => e.feeling).join(\", \")}\r\n            </p>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default RippleAnime;","C:\\all\\proj\\lifepack-recover\\src\\components\\Plan.js",["39","40","41"],"import React from 'react';\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 300 + theme.spacing(3) * 2,\r\n  },\r\n  margin: {\r\n    height: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: \"#52af77\",\r\n    height: 8,\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid currentColor\",\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    \"&:focus, &:hover, &$active\": {\r\n      boxShadow: \"inherit\",\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: \"calc(-50% + 4px)\",\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider);\r\n\r\nfunction Plan () {\r\n  return (\r\n    <React.Fragment>\r\n      <p className=\"plan-text\">\r\n        What will you do long term? (1 month to 1 year)\r\n      </p>\r\n      <textarea className=\"handwriting-area\" rows=\"3\" cols=\"100\"></textarea>\r\n      <p className=\"plan-text\">What will you do short term? (1 day to 1 week)</p>\r\n      <textarea className=\"handwriting-area\" rows=\"3\" cols=\"100\"></textarea>\r\n      <p className=\"plan-text\">\r\n        What will you do right now? (within next 5 minutes)\r\n      </p>\r\n      <textarea className=\"handwriting-area\" rows=\"3\" cols=\"100\"></textarea>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Plan;","C:\\all\\proj\\lifepack-recover\\src\\components\\Rate.js",["42","43"],"import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 300 + theme.spacing(3) * 2,\r\n  },\r\n  margin: {\r\n    height: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: \"#FF8682\",\r\n    height: 20,\r\n    width: \"50%\",\r\n  },\r\n  // marginTop shifts the thumb position on track\r\n  thumb: {\r\n    height: 60,\r\n    width: 60,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid currentColor\",\r\n    marginTop: -25,\r\n    marginLeft: -25,\r\n    \"&:focus, &:hover, &$active\": {\r\n      boxShadow: \"inherit\",\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: \"calc(10% + 4px)\",\r\n    fontSize: \"2rem\",\r\n  },\r\n  track: {\r\n    height: 20,\r\n    borderRadius: 10,\r\n  },\r\n  rail: {\r\n    height: 20,\r\n    borderRadius: 10,\r\n  },\r\n})(Slider);\r\n\r\nfunction Rate() {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <p className=\"handwriting-area\">Pretty</p>\r\n      <PrettoSlider\r\n        className=\"feelings-slider\"\r\n        valueLabelDisplay=\"auto\"\r\n        aria-label=\"pretto slider\"\r\n        defaultValue={20}\r\n      />\r\n      <p className=\"handwriting-area\">Pretty</p>\r\n      <PrettoSlider\r\n        className=\"feelings-slider\"\r\n        valueLabelDisplay=\"auto\"\r\n        aria-label=\"pretto slider\"\r\n        defaultValue={20}\r\n      />\r\n      <p className=\"handwriting-area\">Pretty</p>\r\n      <PrettoSlider\r\n        className=\"feelings-slider\"\r\n        valueLabelDisplay=\"auto\"\r\n        aria-label=\"pretto slider\"\r\n        defaultValue={20}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Rate;\r\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":26,"nodeType":"50","messageId":"51","endLine":1,"endColumn":32},{"ruleId":"48","severity":1,"message":"52","line":3,"column":29,"nodeType":"50","messageId":"51","endLine":3,"endColumn":33},{"ruleId":"48","severity":1,"message":"53","line":3,"column":35,"nodeType":"50","messageId":"51","endLine":3,"endColumn":47},{"ruleId":"48","severity":1,"message":"54","line":3,"column":49,"nodeType":"50","messageId":"51","endLine":3,"endColumn":59},{"ruleId":"48","severity":1,"message":"55","line":3,"column":61,"nodeType":"50","messageId":"51","endLine":3,"endColumn":68},{"ruleId":"48","severity":1,"message":"56","line":12,"column":11,"nodeType":"50","messageId":"51","endLine":12,"endColumn":19},{"ruleId":"48","severity":1,"message":"57","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":18},{"ruleId":"48","severity":1,"message":"58","line":6,"column":7,"nodeType":"50","messageId":"51","endLine":6,"endColumn":16},{"ruleId":"48","severity":1,"message":"59","line":15,"column":7,"nodeType":"50","messageId":"51","endLine":15,"endColumn":19},{"ruleId":"48","severity":1,"message":"57","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":18},{"ruleId":"48","severity":1,"message":"60","line":49,"column":9,"nodeType":"50","messageId":"51","endLine":49,"endColumn":16},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Tabs' is defined but never used.","'TabContainer' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'interval' is assigned a value but never used.","'Typography' is defined but never used.","'useStyles' is assigned a value but never used.","'PrettoSlider' is assigned a value but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]